var sdl.shared ![ -- Pointer ]
var sdl.get-error.ptr ![ -- Pointer ]
var sdl.init.ptr ![ -- Pointer ]
var sdl.poll-event.ptr ![ -- Pointer ]
var sdl.quit.ptr ![ -- Pointer ]
var sdl.create-window.ptr ![ -- Pointer ]
var sdl.destroy-window.ptr ![ -- Pointer ]
var sdl.create-renderer.ptr ![ -- Pointer ]
var sdl.create-texture-from-surface.ptr ![ -- Pointer ]
var sdl.destroy-texture.ptr ![ -- Pointer ]
var sdl.render-copy.ptr ![ -- Pointer ]
var sdl.render-present.ptr ![ -- Pointer ]
var sdl.load-bmp-rw.ptr ![ -- Pointer ]
var sdl.rw-from-file.ptr ![ -- Pointer ]
var sdl.free-surface.ptr ![ -- Pointer ]
var sdl.blit-surface.ptr ![ -- Pointer ]
var sdl.get-window-surface.ptr ![ -- Pointer ]

var loader ![ -- Pointer ]
var load.var ![ -- Pointer ]
var loadtype.var ![ -- Pointer ]
: loader@ loader @ ; ![ -- Quot ]
: loader! loader ! ; ![ Quot -- ]
: load@ load.var @ ; ![ -- Token ]
: load! load.var ! ; ![ Token -- ]
: loadtype@ loadtype.var @ ; ![ -- Token ]
: loadtype! loadtype.var ! ; ![ Token -- ]

: init-loader quot loader! ;
: push-loader loader@ push ;
: def-loader loader@ dup .q parse-token create-def ;
: generate-loader push-loader push-loader push-loader ;
: def-ptrvar var-def loadtype@ create-eff ;
: loader parse-token load! ;
: loadtype parse-token loadtype! ;
rem ptrname symname loader
: c.ffi parse-token dup def-ptrvar [ load@ parse-token ] dip generate-loader ;
: load.Pointer Pointer eff.push ;

: sdl.check-sym @ 0 eq [ "Unable to load sdl symbol" .s 1 exit ] when ;
: sdl.load-sym.unsafe sdl.shared p@ swap dlsym swap p! ;
: sdl.load-sym [ dup ] dip sdl.load-sym.unsafe sdl.check-sym ;

init-loader
  loader sdl.load-sym
  loadtype load.Pointer
  c.ffi sdl.update-window-surface.ptr "SDL_UpdateWindowSurface"
def-loader sdl.load-symbols

: sdl.open-shared "libSDL2.so" rtld-lazy dlopen sdl.shared p! ;
: sdl.check-shared sdl.shared @ 0 eq [ "Unable to load libSDL2.so" .s 1 exit ] when ;
: sdl.init-shared
  sdl.open-shared sdl.check-shared
  sdl.get-error.ptr "SDL_GetError" sdl.load-sym
  sdl.init.ptr "SDL_Init" sdl.load-sym
  sdl.poll-event.ptr "SDL_PollEvent" sdl.load-sym
  sdl.quit.ptr "SDL_Quit" sdl.load-sym
  sdl.create-window.ptr "SDL_CreateWindow" sdl.load-sym
  sdl.destroy-window.ptr "SDL_DestroyWindow" sdl.load-sym
  sdl.create-renderer.ptr "SDL_CreateRenderer" sdl.load-sym
  sdl.create-texture-from-surface.ptr "SDL_CreateTextureFromSurface" sdl.load-sym
  sdl.destroy-texture.ptr "SDL_DestroyTexture" sdl.load-sym
  sdl.render-copy.ptr "SDL_RenderCopy" sdl.load-sym
  sdl.render-present.ptr "SDL_RenderPresent" sdl.load-sym
  sdl.load-bmp-rw.ptr "SDL_LoadBMP_RW" sdl.load-sym
  sdl.rw-from-file.ptr "SDL_RWFromFile" sdl.load-sym
  sdl.free-surface.ptr "SDL_FreeSurface" sdl.load-sym
  sdl.blit-surface.ptr "SDL_UpperBlit" sdl.load-sym
  sdl.get-window-surface.ptr "SDL_GetWindowSurface" sdl.load-sym
  sdl.load-symbols
;

: sdl.WindowU newtype ;
: sdl.Window newtype ;
: sdl.RendererU newtype ;
: sdl.Renderer newtype ;
: sdl.EventU newtype ;
: sdl.Event newtype ;
: sdl.SurfaceU newtype ;
: sdl.Surface newtype ;
: sdl.TextureU newtype ;
: sdl.Texture newtype ;

: sdl.Event.size 56 ;
: sdl.Event.init sp@ sdl.Event.size p- cell p+ sp! ; ![ -- sdl.EventU ]
: sdl.EventU.drop sp@ sdl.Event.size p+ cell p+ sp! ; ![ sdl.EventU -- ] impl drop
: sdl.Event.drop Int.drop ; ![ sdl.Event -- ] impl drop
: sdl.Event.lent sp@ cell p+ ; ![ sdl.EventU -- sdl.EventU sdl.Event ] impl lent
: sdl.Event.type u32@ ; ![ sdl.Event -- Int ]

rem flags
: sdl.init-video 0x20 ;
rem : sdl.windowpos-undefined 0x1fff0000 ;
: sdl.windowpos-undefined 0 ;
: sdl.window-opengl 0x2 ;
: sdl.window-shown 0x4 ;
: sdl.window-resizable 0x20 ;
: sdl.quit-event 0x100 ;
: sdl.default-pos sdl.windowpos-undefined sdl.windowpos-undefined ;

: sdl.get-error sdl.get-error.ptr p@ c.call0 ; ![ -- Cstr ]
: sdl.init
  sdl.init-shared
  sdl.init.ptr p@ c.call1 to-bool [ sdl.get-error .s ] when
;
: sdl.poll-event sdl.poll-event.ptr p@ c.call1 ; ![ sdl.Event -- Bool ]
: sdl.quit sdl.quit.ptr p@ c.call0 Int.drop ;
: sdl.create-window sdl.create-window.ptr p@ c.call6 ; ![ Cstr Int Int Int Int Int -- sdl.WindowU ]
: sdl.destroy-window.unsafe sdl.destroy-window.ptr p@ c.call1 Int.drop ; ![ sdl.WindowU -- ]
: sdl.update-window-surface sdl.update-window-surface.ptr p@ c.call1 Int.drop ; ![ sdl.Window ]
: sdl.WindowU.lent Int.dup ; ![ sdl.WindowU -- sdl.WindowU sdl.Window ] impl lent
: sdl.WindowU.drop sdl.destroy-window.unsafe ; impl drop
: sdl.WindowU.ret ; ![ sdl.WindowU -- sdl.WindowU ]
: sdl.WindowU.dummy ; ![ -- sdl.WindowU ]

: sdl.create-renderer sdl.create-renderer.ptr p@ c.call3 ; ![ sdl.Window Int Int -- sdl.RendererU ]
: sdl.create-texture-from-surface sdl.create-texture-from-surface.ptr p@ c.call2 ; ![ sdl.Renderer sdl.Surface -- sdl.TextureU ]
: sdl.render-copy sdl.render-copy.ptr p@ c.call4 Int.drop ; ![ sdl.Renderer sdl.Texture Pointer Pointer ]
: sdl.render-present sdl.render-present.ptr p@ c.call1 Int.drop ; ![ sdl.Renderer ]

: sdl.rw-from-file sdl.rw-from-file.ptr p@ c.call2 ; ![ Cstr Cstr -- Int ]
: sdl.load-bmp "rb" sdl.rw-from-file 1 sdl.load-bmp-rw.ptr p@ c.call2 dup 0 eq ; ![ Cstr -- sdl.SurfaceU Bool ]
: sdl.free-surface.unsafe sdl.free-surface.ptr p@ c.call1 Int.drop ; ![ sdl.SurfaceU -- ]
: sdl.SurfaceU.lent Int.dup ; ![ sdl.SurfaceU -- sdl.SurfaceU sdl.Surface ] impl lent
: sdl.SurfaceU.drop sdl.free-surface.unsafe ; impl drop
: sdl.SurfaceU.ret ; ![ sdl.SurfaceU -- sdl.SurfaceU ]
: sdl.SurfaceU.dummy ; ![ -- sdl.SurfaceU ]

: sdl.destroy-texture.unsafe sdl.destroy-texture.ptr p@ c.call1 Int.drop ; ![ sdl.TextureU -- ]
: sdl.RendererU.lent Int.dup ; ![ sdl.RendererU -- sdl.RendererU sdl.Renderer ] impl lent
: sdl.TextureU.lent Int.dup ; ![ sdl.TextureU -- sdl.TextureU sdl.Texture ] impl lent
: sdl.TextureU.drop sdl.destroy-texture.unsafe ; impl drop

rem ------ examples ------

var window.ptr ![ -- Pointer ]
: window@ window.ptr @ ; ![ -- sdl.Window ]
: window@.unsafe window.ptr @ ; ![ -- sdl.WindowU ]
: window! window.ptr ! ; ![ sdl.WindowU -- ]
: window.drop window@.unsafe sdl.destroy-window.unsafe ;
var renderer.ptr ![ -- Pointer ]
: renderer@ renderer.ptr @ ; ![ -- sdl.Renderer ]
: renderer! renderer.ptr ! ; ![ sdl.RendererU -- ]

: print-error
  sdl.get-error .s cr
;
: create-window "SDL in Hedon" sdl.default-pos 311 400 0 sdl.create-window ;
: init
  sdl.init-video sdl.init
  create-window window!
  window@ -1 0 sdl.create-renderer renderer!
;
: load-bmp sdl.load-bmp [ "Unable to load bmp" .s cr 1 exit ] when ;
: update-screen window@ sdl.update-window-surface ;

: poll lent sdl.poll-event ;
: isquit lent sdl.Event.type sdl.quit-event eq ;
: quit sdl.TextureU.drop sdl.SurfaceU.drop window.drop sdl.quit ;

: Texture.Renderer.swap Int.swap ; ![ sdl.Texture sdl.Renderer -- sdl.Renderer sdl.Texture ] impl swap
: Surface.Renderer.swap Int.swap ; ![ sdl.Surface sdl.Renderer -- sdl.Renderer sdl.Surface ] impl swap
: new-tex
  lent renderer@ swap sdl.create-texture-from-surface
;
: load-scene "./image.bmp" load-bmp new-tex ;
: draw-scene lent renderer@ swap null null sdl.render-copy ;
: draw draw-scene renderer@ sdl.render-present update-screen ;

: iscontinue poll [ isquit not ] dip ;
: event-loop
  sdl.Event.init [ iscontinue ] [ drop ] while
  [ sdl.EventU.drop ] dip
;
: update [ event-loop ] [ draw ] while ;

rem : main
rem   init
rem   load-scene
rem   draw
rem ;
rem main

: main
  init load-scene update quit
;
main
