array sha256.K ![ -- Pointer ]
0x428a2f98 , 0x71374491 , 0xb5c0fbcf , 0xe9b5dba5 , 0x3956c25b , 0x59f111f1 , 0x923f82a4 , 0xab1c5ed5 ,
0xd807aa98 , 0x12835b01 , 0x243185be , 0x550c7dc3 , 0x72be5d74 , 0x80deb1fe , 0x9bdc06a7 , 0xc19bf174 ,
0xe49b69c1 , 0xefbe4786 , 0x0fc19dc6 , 0x240ca1cc , 0x2de92c6f , 0x4a7484aa , 0x5cb0a9dc , 0x76f988da ,
0x983e5152 , 0xa831c66d , 0xb00327c8 , 0xbf597fc7 , 0xc6e00bf3 , 0xd5a79147 , 0x06ca6351 , 0x14292967 ,
0x27b70a85 , 0x2e1b2138 , 0x4d2c6dfc , 0x53380d13 , 0x650a7354 , 0x766a0abb , 0x81c2c92e , 0x92722c85 ,
0xa2bfe8a1 , 0xa81a664b , 0xc24b8b70 , 0xc76c51a3 , 0xd192e819 , 0xd6990624 , 0xf40e3585 , 0x106aa070 ,
0x19a4c116 , 0x1e376c08 , 0x2748774c , 0x34b0bcb5 , 0x391c0cb3 , 0x4ed8aa4a , 0x5b9cca4f , 0x682e6ff3 ,
0x748f82ee , 0x78a5636f , 0x84c87814 , 0x8cc70208 , 0x90befffa , 0xa4506ceb , 0xbef9a3f7 , 0xc67178f2 ,

array sha256.init-hash ![ -- Pointer ]
0x6a09e667 , 0xbb67ae85 , 0x3c6ef372 , 0xa54ff53a ,
0x510e527f , 0x9b05688c , 0x1f83d9ab , 0x5be0cd19 ,

: sha256.W 32 ;
: rotr-l shr ;
: rotr-r 32 swap - shl ;
: rotr [ rotr-l ] 2keep rotr-r bor ;

: bicar Quot.swap [ keep swap dip swap ] postcompile ; immediate
: bicar@ Quot.dup [ keep swap dip swap ] postcompile ; immediate
rem z y x
: ch [ band ] [ bnot band ] bicar xor ;
: maj
  [ 2dup band ] dip
  [ band ] bicar@
  xor xor
;

: keep-rotr swap [ swap rotr ] keep ;
: tosigma xor xor u64-to-u32 ;
: bgsigma0 2  keep-rotr 13 keep-rotr 22 keep-rotr drop tosigma ;
: bgsigma1 6  keep-rotr 11 keep-rotr 25 keep-rotr drop tosigma ;
: smsigma0 7  keep-rotr 18 keep-rotr 3  shr tosigma ;
: smsigma1 17 keep-rotr 19 keep-rotr 10 shr tosigma ;

: take-and-push-byte [ shr 0xff band swap push-char ] 2keep drop ;
: push-int32
  24 take-and-push-byte
  16 take-and-push-byte
  8 take-and-push-byte
  0 take-and-push-byte
  drop
;
: push-int64
  56 take-and-push-byte
  48 take-and-push-byte
  40 take-and-push-byte
  32 take-and-push-byte
  24 take-and-push-byte
  16 take-and-push-byte
  8 take-and-push-byte
  0 take-and-push-byte
  drop
;

rem s
: need-extend length 64 mod 55 gr ;
: needed-size 64 mod 64 swap - ;
: extend-input-by-n [ [ nullchar swap push-char ] 2dip ] do drop drop ; rem s n
: extend-to-nextblock dup length needed-size extend-input-by-n ;
: push-x80 0x80 swap push-char ;
: extend-to-56 dup length needed-size 8 - extend-input-by-n ;
: push-length swap 8 mul push-int64 ;
: padding
  [ length ] keep
  dup need-extend [ extend-to-nextblock ] when
  push-x80 extend-to-56 push-length
;

: pull4byte
  [ 0 + swap string@ ] 2keep
  [ 1 + swap string@ ] 2keep
  [ 2 + swap string@ ] 2keep
  [ 3 + swap string@ ] 2keep
  drop drop
;
: to-32bit 24 shl [ 16 shl ] dip + [ 8 shl ] dip + + ;
: pull32bit pull4byte to-32bit ;
: pull-and-push32 pull32bit push-int32 ; rem [ d s -- d ]

: alloc-blk256 256 new-string ;
: le64 64 le ;
: recalc-1blk
  swap
  [ 2 - 4 mul pull32bit smsigma1 ] 2keep
  [ 7 - 4 mul pull32bit ] 2keep
  [ 15 - 4 mul pull32bit smsigma0 ] 2keep
  [ 16 - 4 mul pull32bit ] 2keep
  drop drop
  + + +
;
: recalc-blk256
  16 [ dup le64 ] [ [ swap [ recalc-1blk ] [ swap push-int32 ] bi ] 2keep 1 + ] while drop drop
;
: blk64-to-blk256
  alloc-blk256 swap
  0 [ dup le64 ] [ [ pull-and-push32 ] 2keep 4 + ] while drop drop
  recalc-blk256
;

var a ![ -- Pointer ]
var b ![ -- Pointer ]
var c ![ -- Pointer ]
var d ![ -- Pointer ]
var e ![ -- Pointer ]
var f ![ -- Pointer ]
var g ![ -- Pointer ]
var h ![ -- Pointer ]
: t1 [ 4 mul pull32bit ] keep sha256.K array@ h @ e @ bgsigma1 e @ f @ g @ ch + + + + ;
: t2 a @ bgsigma0 a @ b @ c @ maj + ;
: rotate-alphabet
  t1 t2
  g @ h !
  f @ g !
  e @ f !
  [ dup d @ + e ! ] dip
  c @ d !
  b @ c !
  a @ b !
  + a !
;
: init-alphabet
  0 sha256.init-hash array@ a !
  1 sha256.init-hash array@ b !
  2 sha256.init-hash array@ c !
  3 sha256.init-hash array@ d !
  4 sha256.init-hash array@ e !
  5 sha256.init-hash array@ f !
  6 sha256.init-hash array@ g !
  7 sha256.init-hash array@ h !
;
: compute-rotation
  64 [ [ 1 + [ rotate-alphabet ] 2keep ] 2dip ] do drop drop drop drop
;
: pull-computed-hash
  32 new-string
  [ a @ push-int32 ] keep
  [ b @ push-int32 ] keep
  [ c @ push-int32 ] keep
  [ d @ push-int32 ] keep
  [ e @ push-int32 ] keep
  [ f @ push-int32 ] keep
  [ g @ push-int32 ] keep
  [ h @ push-int32 ] keep
;
: compute-hash
  init-alphabet
  0 [ [ dup length ] dip swap 2dup le swap drop ] [ [ compute-rotation ] 2keep 256 + ] while drop drop
  pull-computed-hash
;

: sha256.compute padding blk64-to-blk256 compute-hash ;

: take-hexr 0x0f band ;
: take-hexl 4 shr 0x0f band ;
: itoc dup 9 gr [ 10 - 97 + ] [ 48 + ] if ;
: alloc-hexstring 64 new-string ;
: take-and-push-hexbyte
  swap [ swap string@ [ take-hexr itoc ] [ take-hexl itoc ] bi ] dip push-char push-char
; rem [ sha256string hexstring i -- hexstring ]
: to-hexstring
  [ [ [ dup ] 3dip swap drop take-and-push-hexbyte ] 2keep ] do drop drop swap drop
;
: padding-to-hexstring
  128 new-string 64 to-hexstring
;
: sha256-to-hexstring
  alloc-hexstring 32 to-hexstring
;

: padding-check
  1000 new-string
  0x00 swap push-char 0x00 swap push-char 0x11 swap push-char 0x11 swap push-char 0x22 swap push-char 0x22 swap push-char 0x33 swap push-char 0x33 swap push-char 0x44 swap push-char 0x44 swap push-char 0x55 swap push-char 0x55 swap push-char 0x66 swap push-char 0x66 swap push-char 0x77 swap push-char 0x77 swap push-char 0x88 swap push-char 0x88 swap push-char 0x99 swap push-char 0x99 swap push-char 0xaa swap push-char 0xaa swap push-char 0xbb swap push-char 0xbb swap push-char 0xcc swap push-char 0xcc swap push-char 0xdd swap push-char 0xdd swap push-char 0xee swap push-char 0xee swap push-char 0xff swap push-char 0xff swap push-char
0x00 swap push-char 0x11 swap push-char 0x22 swap push-char 0x33 swap push-char 0x44 swap push-char 0x55 swap push-char 0x66 swap push-char 0x77 swap push-char
  padding dup length . cr padding-to-hexstring .ss cr
;
padding-check

: main
  rem 100 new-string 0xff push-int32 sha256-to-hexstring .ss cr
  "a" dup .s " " .s string padding padding-to-hexstring .ss cr
  "a" dup .s " " .s string sha256.compute sha256-to-hexstring .ss cr
  "abc" dup .s " " .s string sha256.compute sha256-to-hexstring .ss cr
  "aaaaa" dup .s " " .s string sha256.compute sha256-to-hexstring .ss cr
; main
