: Fixnum uniontype ;
Int Fixnum is
Cstr Fixnum is
Bool Fixnum is
Pointer Fixnum is
Type Fixnum is
Quot Fixnum is
Token Fixnum is
Word Fixnum is
EffSave Fixnum is

: eff.save-out builtin.eff.save-out ; ![ -- EffSave ]
: eff.load-out builtin.eff.load-out ; ![ EffSave -- ]
: eff.save builtin.eff.save ; ![ -- EffSave ]
: eff.load builtin.eff.load ; ![ EffSave -- ]
: eff.check builtin.eff.check ; ![ EffSave EffSave -- ]

: to-int ; ![ Pointer -- Int ]
: to-cstr ; ![ Pointer -- Cstr ]
: cstr-to-pointer ; ![ Cstr -- Pointer ]
: pointer-to-cstr ; ![ Pointer -- Cstr ]
: to-bool ; ![ Int -- Bool ]
: true 1 ; ![ -- Bool ]
: false 0 ; ![ -- Bool ]
: cell 8 ;
: null 0 ; ![ -- Pointer ]
: .b . ; ![ Bool -- ]

: drop.eff a eff.drop ;
: dup.eff a eff.dup ;
: drop trait ; eff.attach drop.eff
: dup trait ; eff.attach dup.eff

: grow [ 0x48 0x83 0xeb 0x08 ] X ; ![ -- Int ]
rem : Fixnum.drop [ 0x48 0x83 0xc3 0x08 ] X ; ![ Fixnum ] impl drop
: Fixnum.drop.eff Fixnum eff.drop ;
: Fixnum.drop [ 0x48 0x83 0xc3 0x08 ] X ; eff.attach Fixnum.drop.eff impl drop
: Int.drop Fixnum.drop ; ![ Int ]
: Pointer.drop Fixnum.drop ; ![ Pointer ]
: Cstr.drop Fixnum.drop ; ![ Cstr ]

: >rax [ 0x48 0x8b 0x03 ] X Int.drop ;
: >rcx [ 0x48 0x8b 0x0b ] X Int.drop ;
: >rdx [ 0x48 0x8b 0x13 ] X Int.drop ;
: >rdi [ 0x48 0x8b 0x3b ] X Int.drop ;
: >rsi [ 0x48 0x8b 0x33 ] X Int.drop ;
: >r8 [ 0x4c 0x8b 0x03 ] X Int.drop ;
: >r9 [ 0x4c 0x8b 0x0b ] X Int.drop ;
: >r10 [ 0x4c 0x8b 0x13 ] X Int.drop ;
: >r11 [ 0x4c 0x8b 0x1b ] X Int.drop ;
: rax> grow [ 0x48 0x89 0x03 ] X ;
: rcx> grow [ 0x48 0x89 0x0b ] X ;
: rdx> grow [ 0x48 0x89 0x13 ] X ;

: Type.dup >rax grow rax> ; ![ Type -- Type Type ]
: Fixnum.dup.eff Fixnum Type.dup eff.drop Type.dup eff.push eff.push ;
: Fixnum.dup >rax grow rax> ; eff.attach Fixnum.dup.eff impl dup

: Type.swap >rax >rcx rax> rcx> ; ![ Type Type -- Type Type ]
: swap.eff a dup eff.drop b dup eff.drop Type.swap eff.push eff.push ;
: swap trait ; eff.attach swap.eff
: Fixnum.swap.eff Fixnum dup eff.drop Fixnum dup eff.drop Type.swap eff.push eff.push ;
: Fixnum.swap >rax >rcx rax> rcx> ; eff.attach Fixnum.swap.eff impl swap

: Type.rot >rax >rcx >rdx rax> rdx> rcx> ; ![ Type Type Type -- Type Type Type ]
: rot.eff a dup eff.drop b dup eff.drop c dup eff.drop Type.rot eff.push eff.push eff.push ;
: rot trait ; eff.attach rot.eff
: Fixnum.rot.eff Fixnum dup eff.drop Fixnum dup eff.drop Fixnum dup eff.drop Type.rot eff.push eff.push eff.push ;
: Fixnum.rot  >rax >rcx >rdx rax> rdx> rcx> ; eff.attach Fixnum.rot.eff impl rot

: + >rcx >rax [ 0x48 0x01 0xc8 ] X rax> ;
: - >rcx >rax [ 0x48 0x29 0xc8 ] X rax> ;
: * >rcx >rax [ 0x48 0xf7 0xe1 ] X rax> ;
: / 0 >rdx >rcx >rax [ 0x48 0xf7 0xf9 ] X rax> ;
: mod 0 >rdx >rcx >rax [ 0x48 0xf7 0xf9 ] X rdx> ;
: p+ + ; ![ Pointer Int -- Pointer ]
: p- - ; ![ Pointer Int -- Pointer ]
: pp+ + ; ![ Pointer Pointer -- Pointer ]
: pp- - ; ![ Pointer Pointer -- Pointer ]
: eq
  >rcx >rax
  [ 0x48 0x39 0xc8
    0x0f 0x94 0xc0
    0x48 0x0f 0xb6 0xc0 ] X
  rax>
; ![ Int Int -- Bool ]
: <
  >rcx >rax
  [ 0x48 0x39 0xc8
    0x0f 0x9c 0xc0
    0x48 0x0f 0xb6 0xc0 ] X
  rax>
; ![ Int Int -- Bool ]
: >
  swap <
;

: shl >rcx >rax [ 0x48 0xd3 0xe0 ] X rax> ;
: shr >rcx >rax [ 0x48 0xd3 0xe8 ] X rax> ;
: or >rcx >rax [ 0x48 0x09 0xc8 ] X rax> ;
: and >rcx >rax [ 0x48 0x21 0xc8 ] X rax> ;
: xor >rcx >rax [ 0x48 0x31 0xc8 ] X rax> ;
: not >rax [ 0x48 0xf7 0xd0 ] X rax> ;

: >rbx [ 0x48 0x8b 0x1b ] X ; ![ Int -- ]
: rbx> grow [ 0x48 0x89 0x1b ] X ;
: sp@ rbx> ; ![ -- Pointer ]
: sp! >rbx ; ![ Pointer -- ]

: @ >rax [ 0x48 0x8b 0x00 ] X rax> ; ![ Pointer -- Int ]
: u64-to-u32 0xffffffff and ;
: u32@ >rax [ 0x8b 0x00 ] X rax> ; ![ Pointer -- Int ]
: u32! >rax >rcx [ 0x89 0x08 ] X ; ![ Int Pointer -- ]
: ! >rax >rcx [ 0x48 0x89 0x08 ] X ; ![ Int Pointer -- ]
: p@ @ ; ![ Pointer -- Pointer ]
: p! ! ; ![ Pointer Pointer -- ]
: s@ @ ; ![ Pointer -- Cstr ]
: s! ! ; ![ Cstr Pointer -- ]
: s+ + ; ![ Cstr Int -- Cstr ]
: u8@ >rax [ 0x8a 0x00 0x48 0x0f 0xb6 0xc0 ] X rax> ; ![ Pointer -- Int ]
: u8! >rax >rcx [ 0x88 0x08 ] X ; ![ Int Pointer -- ]
: c@ >rax [ 0x8a 0x00 0x48 0x0f 0xb6 0xc0 ] X rax> ; ![ Cstr -- Int ]
: c! >rax >rcx [ 0x88 0x08 ] X ; ![ Int Cstr -- ]
: Int.pick3.eff
  b dup eff.drop
  a dup eff.drop
  Int eff.drop
  Int eff.push eff.push eff.push Int eff.push
;
: Int.pick3 sp@ cell cell + cell + p+ @ ; eff.attach Int.pick3.eff
: pick3.eff
  b dup eff.drop
  a dup eff.drop
  Fixnum eff.drop
  Fixnum eff.push eff.push eff.push Fixnum eff.push
;
: pick3 sp@ cell cell + cell + p+ @ ; eff.attach pick3.eff
: +! dup @ Int.pick3 + swap ! Int.drop ;
: 1+ 1 + ;

: cp builtin.cp ; ![ -- Pointer ]
: cp@ cp p@ ;

rem syscalls
: write-syscall 0x0f op 0x05 op ; immediate
: syscall0 >rax write-syscall >rax ;
: syscall1 >rax >rdi write-syscall rax> ;
: syscall2 >rax >rsi >rdi write-syscall rax> ;
: syscall3 >rax >rdx >rsi >rdi write-syscall rax> ;
: exit 60 syscall1 Int.drop ;
