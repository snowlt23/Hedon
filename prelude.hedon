: b.Type builtin.Type builtin.Type.eff ;
: Type builtin.Type ; ![ -- b.Type ]
: eff.drop builtin.eff.drop ; ![ Type -- ]
: eff.push builtin.eff.push ; ![ Type -- ]
: eff.dup builtin.eff.dup ; ![ Type -- ]
: newtype builtin.newtype Type eff.push ; immediate
: paramtype builtin.paramtype Type eff.push ; immediate
: a paramtype ;
: b paramtype ;
: c paramtype ;

: Quot builtin.Quot ; ![ -- Type ]
: Token newtype ;
: Int builtin.Int ; ![ -- Type ]
: Cstr builtin.Cstr ; ![ -- Type ]
: Bool newtype ;
: Pointer newtype ;
: EffSave newtype ;

: eff.save-out builtin.eff.save-out ; ![ -- EffSave ]
: eff.load-out builtin.eff.load-out ; ![ EffSave -- ]
: eff.save builtin.eff.save ; ![ -- EffSave ]
: eff.load builtin.eff.load ; ![ EffSave -- ]
: eff.check builtin.eff.check ; ![ EffSave EffSave -- ]

: to-int ; ![ Pointer -- Int ]
: to-cstr ; ![ Pointer -- Cstr ]
: cstr-to-pointer ; ![ Cstr -- Pointer ]
: pointer-to-cstr ; ![ Pointer -- Cstr ]
: to-bool ; ![ Int -- Bool ]
: true 1 ; ![ -- Bool ]
: false 0 ; ![ -- Bool ]
: cell 8 ;
: null 0 ; ![ -- Pointer ]
: .b . ; ![ Bool -- ]

: drop.eff a eff.drop ;
: dup.eff a eff.dup ;
: drop trait ; eff.attach drop.eff
: dup trait ; eff.attach dup.eff

: grow [ 0x48 0x83 0xeb 0x08 ] X ; ![ -- Int ]
: Int.drop [ 0x48 0x83 0xc3 0x08 ] X ; ![ Int ] impl drop
: Cstr.drop Int.drop ; ![ Cstr ] impl drop
: Bool.drop Int.drop ; ![ Bool ] impl drop
: Pointer.drop Int.drop ; ![ Pointer ] impl drop
: Type.drop [ 0x48 0x83 0xc3 0x08 ] X ; ![ Type ] impl drop
: >rax [ 0x48 0x8b 0x03 ] X Int.drop ;
: >rcx [ 0x48 0x8b 0x0b ] X Int.drop ;
: >rdx [ 0x48 0x8b 0x13 ] X Int.drop ;
: >rdi [ 0x48 0x8b 0x3b ] X Int.drop ;
: >rsi [ 0x48 0x8b 0x33 ] X Int.drop ;
: >r8 [ 0x4c 0x8b 0x03 ] X Int.drop ;
: >r9 [ 0x4c 0x8b 0x0b ] X Int.drop ;
: >r10 [ 0x4c 0x8b 0x13 ] X Int.drop ;
: >r11 [ 0x4c 0x8b 0x1b ] X Int.drop ;
: rax> grow [ 0x48 0x89 0x03 ] X ;
: rcx> grow [ 0x48 0x89 0x0b ] X ;
: rdx> grow [ 0x48 0x89 0x13 ] X ;
: Int.dup >rax grow rax> ; impl dup
: Cstr.dup Int.dup ; ![ Cstr -- Cstr Cstr ] impl dup
: Type.dup Int.dup ; ![ Type -- Type Type ] impl dup
: Pointer.dup Int.dup ; ![ Pointer -- Pointer Pointer ] impl dup
: Quot.dup Int.dup ; ![ Quot -- Quot Quot ] impl dup
: Token.dup Int.dup ; ![ Token -- Token Token ] impl dup
: EffSave.dup Int.dup ; ![ EffSave -- EffSave EffSave ] impl dup
: prim.Int.swap >rax >rcx rax> rcx> ;
: prim.Type.swap prim.Int.swap ; ![ Type Type -- Type Type ]

: lent.eff a dup eff.drop eff.push b eff.push ;
: lent trait ; eff.attach lent.eff
: swap.eff a dup eff.drop b dup eff.drop prim.Type.swap eff.push eff.push ;
: swap trait ; eff.attach swap.eff

: Int.swap prim.Int.swap ; impl swap
: Type.swap prim.Type.swap ; impl swap
: Cstr.swap Int.swap ; ![ Cstr Cstr -- Cstr Cstr ] impl swap
: Cstr.Int.swap Int.swap ; ![ Cstr Int -- Int Cstr ] impl swap
: Int.CStr.swap Int.swap ; ![ Int Cstr -- Cstr Int ] impl swap
: Pointer.Cstr.swap Int.swap ; ![ Pointer Cstr -- Cstr Pointer ] impl swap
: Cstr.Pointer.swap Int.swap ; ![ Cstr Pointer -- Pointer Cstr ] impl swap
: Pointer.swap Int.swap ; ![ Pointer Pointer -- Pointer Pointer ] impl swap
: Pointer.Int.swap Int.swap ; ![ Pointer Int -- Int Pointer ] impl swap
: Int.Pointer.swap Int.swap ; ![ Int Pointer -- Pointer Int ] impl swap
: Quot.swap Int.swap ; ![ Quot Quot -- Quot Quot ] impl swap
: Quot.Token.Int.swap ; ![ Quot Token -- Token Quot ] impl swap
: Token.Quot.Int.swap ; ![ Token Quot -- Quot Token ] impl swap
: Quot.Type.swap Int.swap ; ![ Quot Type -- Type Quot ] impl swap

: + >rcx >rax [ 0x48 0x01 0xc8 ] X rax> ;
: - >rcx >rax [ 0x48 0x29 0xc8 ] X rax> ;
: mul >rcx >rax [ 0x48 0xf7 0xe1 ] X rax> ;
: div 0 >rdx >rcx >rax [ 0x48 0xf7 0xf9 ] X rax> ;
: mod 0 >rdx >rcx >rax [ 0x48 0xf7 0xf9 ] X rdx> ;
: p+ + ; ![ Pointer Int -- Pointer ]
: p- - ; ![ Pointer Int -- Pointer ]
: pp+ + ; ![ Pointer Pointer -- Pointer ]
: pp- - ; ![ Pointer Pointer -- Pointer ]
: eq
  >rcx >rax
  [ 0x48 0x39 0xc8
    0x0f 0x94 0xc0
    0x48 0x0f 0xb6 0xc0 ] X
  rax>
; ![ Int Int -- Bool ]
: le
  >rcx >rax
  [ 0x48 0x39 0xc8
    0x0f 0x9c 0xc0
    0x48 0x0f 0xb6 0xc0 ] X
  rax>
; ![ Int Int -- Bool ]
: gr
  swap le
;

: shl >rcx >rax [ 0x48 0xd3 0xe0 ] X rax> ;
: shr >rcx >rax [ 0x48 0xd3 0xe8 ] X rax> ;
: bor >rcx >rax [ 0x48 0x09 0xc8 ] X rax> ;
: band >rcx >rax [ 0x48 0x21 0xc8 ] X rax> ;
: xor >rcx >rax [ 0x48 0x31 0xc8 ] X rax> ;
: bnot >rax [ 0x48 0xf7 0xd0 ] X rax> ;

: >rbx [ 0x48 0x8b 0x1b ] X ; ![ Int -- ]
: rbx> grow [ 0x48 0x89 0x1b ] X ;
: sp@ rbx> ; ![ -- Pointer ]
: sp! >rbx ; ![ Pointer -- ]

: band >rcx >rax [ 0x48 0x21 0xc8 ] X rax> ;
: shr >rcx >rax [ 0x48 0xd3 0xe8 ] X rax> ;
: @ >rax [ 0x48 0x8b 0x00 ] X rax> ; ![ Pointer -- Int ]
: u64-to-u32 0xffffffff band ;
: u32@ >rax [ 0x8b 0x00 ] X rax> ; ![ Pointer -- Int ]
: u32! >rax >rcx [ 0x89 0x08 ] X ; ![ Int Pointer -- ]
: ! >rax >rcx [ 0x48 0x89 0x08 ] X ; ![ Int Pointer -- ]
: p@ @ ; ![ Pointer -- Pointer ]
: p! ! ; ![ Pointer Pointer -- ]
: s+ + ; ![ Cstr Int -- Cstr ]
: u8@ >rax [ 0x8a 0x00 0x48 0x0f 0xb6 0xc0 ] X rax> ; ![ Pointer -- Int ]
: u8! >rax >rcx [ 0x88 0x08 ] X ; ![ Int Pointer -- ]
: c@ >rax [ 0x8a 0x00 0x48 0x0f 0xb6 0xc0 ] X rax> ; ![ Cstr -- Int ]
: c! >rax >rcx [ 0x88 0x08 ] X ; ![ Int Cstr -- ]
: Int.pick3.eff
  b dup eff.drop
  a dup eff.drop
  Int eff.drop
  Int eff.push eff.push eff.push Int eff.push
;
: Int.pick3 sp@ cell cell + cell + p+ @ ; eff.attach Int.pick3.eff
: +! dup @ Int.pick3 + Pointer.Int.swap ! Int.drop ;
: 1+ 1 + ;

: cp builtin.cp ; ![ -- Pointer ]
: cp@ cp p@ ;

rem syscalls
: write-syscall 0x0f op 0x05 op ; immediate
: syscall0 >rax write-syscall >rax ;
: syscall1 >rax >rdi write-syscall rax> ;
: syscall2 >rax >rsi >rdi write-syscall rax> ;
: syscall3 >rax >rdx >rsi >rdi write-syscall rax> ;
: exit 60 syscall1 Int.drop ;
