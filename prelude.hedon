: b.Type builtin.Type builtin.Type.eff ;
: Type builtin.Type ; !( -- b.Type )
: eff.drop builtin.eff.drop ; !( Type -- )
: eff.push builtin.eff.push ; !( Type -- )
: eff.dup builtin.eff.dup ; !( Type -- )
: newtype builtin.newtype Type eff.push ; immediate
: paramtype builtin.paramtype Type eff.push ; immediate
: a paramtype ;
: b paramtype ;
: c paramtype ;

: Quot builtin.Quot ; !( -- Type )
: Int builtin.Int ; !( -- Type )
: Pointer newtype ;

: cell 8 ;

: drop.eff a eff.drop ;
: dup.eff a eff.dup ;
: drop trait ; eff.attach drop.eff
: dup trait ; eff.attach dup.eff

: grow [ 0x48 0x83 0xeb 0x08 ] X ; !( -- Int )
: Int.drop [ 0x48 0x83 0xc3 0x08 ] X ; !( Int ) impl> drop
: >rax [ 0x48 0x8b 0x03 ] X Int.drop ;
: >rcx [ 0x48 0x8b 0x0b ] X Int.drop ;
: >rdx [ 0x48 0x8b 0x13 ] X Int.drop ;
: >rdi [ 0x48 0x8b 0x3b ] X Int.drop ;
: >rsi [ 0x48 0x8b 0x33 ] X Int.drop ;
: >r8 [ 0x4c 0x8b 0x03 ] X Int.drop ;
: >r9 [ 0x4c 0x8b 0x0b ] X Int.drop ;
: rax> grow [ 0x48 0x89 0x03 ] X ;
: rcx> grow [ 0x48 0x89 0x0b ] X ;
: Int.dup >rax grow rax> ; impl> dup
: Type.dup Int.dup ; !( Type -- Type Type ) impl> dup
: Pointer.dup Int.dup ; !( Pointer -- Pointer Pointer ) impl> dup
: Int.swap >rax >rcx rax> rcx> ;
: Pointer.Int.swap Int.swap ; !( Pointer Int -- Int Pointer )
: Type.swap Int.swap ; !( Type Type -- Type Type )
: Quot.Type.swap Int.swap ; !( Quot Type -- Type Quot )

: + >rcx >rax [ 0x48 0x01 0xc8 ] X rax> ;
: - >rcx >rax [ 0x48 0x29 0xc8 ] X rax> ;
: p+ + ; !( Pointer Int -- Pointer )
: p- - ; !( Pointer Int -- Pointer )
: eq
  >rcx >rax
  [ 0x48 0x39 0xc8
    0x0f 0x94 0xc0
    0x48 0x0f 0xb6 0xc0 ] X
  rax>
;

: >rbx [ 0x48 0x8b 0x1b ] X ; !( Int -- )
: rbx> grow [ 0x48 0x89 0x1b ] X ;
: sp@ rbx> ; !( -- Pointer )
: sp! >rbx ; !( Pointer -- )

: band >rcx >rax [ 0x48 0x21 0xc8 ] X rax> ;
: shr >rcx >rax [ 0x48 0xd3 0xe8 ] X rax> ;
: @ >rax [ 0x48 0x8b 0x00 ] X rax> ; !( Pointer -- Int )
: u32@ >rax [ 0x8b 0x00 ] X rax> ; !( Pointer -- Int )
: ! >rax >rcx [ 0x48 0x89 0x08 ] X ; !( Int Pointer -- )
: p@ >rax [ 0x48 0x8b 0x00 ] X rax> ; !( Pointer -- Pointer )
: p! >rax >rcx [ 0x48 0x89 0x08 ] X ; !( Pointer Pointer -- )
: c! >rax >rcx [ 0x88 0x08 ] X ; !( Int Pointer -- )
: Int.pick3.eff
  b dup eff.drop
  a dup eff.drop
  Int eff.drop
  Int eff.push eff.push eff.push Int eff.push
;
: Int.pick3 sp@ cell cell + cell + p+ @ ; eff.attach Int.pick3.eff
: +! dup @ Int.pick3 + Pointer.Int.swap ! Int.drop ;

: dp builtin.dp ; !( -- Pointer )
: dp@ dp p@ ;
: cp builtin.cp ; !( -- Pointer )
: here dp@ ;
: allot dp +! ;
: , here ! cell allot ;

rem syscalls
: op-syscall 0x0f op 0x05 op ; immediate
: syscall0 >rax op-syscall >rax ;
: syscall1 >rax >rdi op-syscall rax> ;
: syscall2 >rax >rsi >rdi op-syscall rax> ;
: syscall3 >rax >rdx >rsi >rdi op-syscall rax> ;
: exit 60 syscall1 Int.drop ;

rem dataflow
: spill.unsafe
  0xff op 0x33 op
  0xff op 0x33 op
  0x48 op 0x83 op 0xc3 op 0x08 op
;
: restore.unsafe
  0x48 op 0x83 op 0xeb op 0x08 op
  0x8f op 0x03 op
  0x8f op 0x03 op
;
: dip
  a dup eff.drop
  spill.unsafe
  Quot.Type.swap compile
  [ >rax ] postcompile
  restore.unsafe
  [ rax> ] postcompile
  eff.push
; immediate
