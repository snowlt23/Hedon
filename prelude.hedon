: Type builtin.Type.t builtin.eff.apply ;
: Type.t builtin.Type.t ; !( -- Type )
: newtype builtin.newtype ; immediate !( -- Type )
: uniontype builtin.uniontype ; immediate !( -- Type )
: paramtype builtin.paramtype ; immediate !( -- Type )
: EffSave newtype ;
: eff.drop builtin.eff.drop ; !( Type -- )
: eff.push builtin.eff.push ; !( Type -- )
: eff.dup builtin.eff.dup ; !( Type -- )
: eff.apply builtin.eff.apply ; !( Type -- )
: eff.save builtin.eff.save ; !( -- EffSave )
: eff.load builtin.eff.load ; !( EffSave -- )
: eff.check builtin.eff.check ; !( EffSave EffSave -- )

: Int.t builtin.Int.t ; !( -- Type )
: Int Int.t eff.apply ;
: Pointer.t newtype ;
: Pointer Pointer.t eff.apply ;
: a paramtype ;
: b paramtype ;
: c paramtype ;

: IfAddr.t newtype ;
: IfAddr IfAddr.t eff.apply ;
: BeginAddr.t newtype ;
: BeginAddr BeginAddr.t eff.apply ;
: WhileAddr.t newtype ;
: WhileAddr WhileAddr.t eff.apply ;

: drop.eff a eff.drop ;
: dup.eff a eff.dup ;
: drop trait ; !( drop.eff )
: dup trait ; !( dup.eff )

: cell 8 ;

: grow X 0x48 X 0x83 X 0xeb X 0x08 ; !( -- Int )
: Int.drop X 0x48 X 0x83 X 0xc3 X 0x08 ; !( Int ) impl> drop
: >rax X 0x48 X 0x8b X 0x03 Int.drop ;
: >rbx X 0x48 X 0x8b X 0x1b Int.drop ;
: >rcx X 0x48 X 0x8b X 0x0b Int.drop ;
: >rdx X 0x48 X 0x8b X 0x13 Int.drop ;
: >rdi X 0x48 X 0x8b X 0x3b Int.drop ;
: >rsi X 0x48 X 0x8b X 0x33 Int.drop ;
: >r8 X 0x4c X 0x8b X 0x03 Int.drop ;
: >r9 X 0x4c X 0x8b X 0x0b Int.drop ;
: >r10 X 0x4c X 0x8b X 0x13 Int.drop ;
: >r11 X 0x4c X 0x8b X 0x1b Int.drop ;
: rax> grow X 0x48 X 0x89 X 0x03 ;
: rbx> grow X 0x48 X 0x89 X 0x1b ;
: rcx> grow X 0x48 X 0x89 X 0x0b ;
: Int.dup >rax grow rax> ; impl> dup
: Type.dup Int.dup ; !( Type -- Type Type ) impl> dup
: Pointer.dup Int.dup ; !( Pointer -- Pointer Pointer ) impl> dup
: Int.swap >rax >rcx rax> rcx> ;
: Pointer.Int.swap Int.swap ; !( Pointer Int -- Int Pointer )
: Type.swap Int.swap ; !( Type Type -- Type Type )
: sp@ rbx> ; !( -- Pointer )
: sp! >rbx ; !( Pointer Pointer -- )

: + >rcx >rax X 0x48 X 0x01 X 0xc8 rax> ;
: - >rcx >rax X 0x48 X 0x29 X 0xc8 rax> ;
: p+ + ; !( Pointer Int -- Pointer )
: p- - ; !( Pointer Int -- Pointer )

: band >rcx >rax X 0x48 X 0x21 X 0xc8 rax> ;
: shr >rcx >rax X 0x48 X 0xd3 X 0xe8 rax> ;
: @ >rax X 0x48 X 0x8b X 0x00 rax> ; !( Pointer -- Int )
: ! >rax >rcx X 0x48 X 0x89 X 0x08 ; !( Int Pointer -- )
: p@ >rax X 0x48 X 0x8b X 0x00 rax> ; !( Pointer -- Pointer )
: p! >rax >rcx X 0x48 X 0x89 X 0x08 ; !( Pointer Pointer -- )
: c! >rax >rcx X 0x88 X 0x08 ; !( Int Pointer -- )
: Int.pick2.eff
  a dup eff.drop
  Int.t eff.drop
  Int.t eff.push eff.push Int.t eff.push
;
: Int.pick2 sp@ cell cell + p+ @ ; !( Int.pick2.eff )
: cast-pointer ; !( Int -- Pointer )
: Int.pick3.eff
  a dup eff.drop
  b dup eff.drop
  Int.t eff.drop
  Int.t eff.push eff.push eff.push Int.t eff.push
;
: Int.pick3 sp@ cell cell + cell + p+ @ ; !( Int.pick3.eff )
: Int.pick4.eff
  a dup eff.drop
  b dup eff.drop
  c dup eff.drop
  Int.t eff.drop
  Int.t eff.push eff.push eff.push eff.push Int.t eff.push
;
: Int.pick4 sp@ cell cell + cell + cell + p+ @ ; !( Int.pick4.eff )
: +! dup @ Int.pick3 + Pointer.Int.swap ! Int.drop ;

: dp builtin.dp ; !( -- Pointer )
: dp@ dp p@ ;
: cp builtin.cp ; !( -- Pointer )
: here dp@ ;
: allot dp +! ;
: , here ! cell allot ;
: var create 0 , ;
: const create , does> @ ; !( Int )

rem : op cp p@ c! 1 cp +! ;
: ret 0xc3 op ; immediate
: op-lendian32
  dup 0 shr 0xff band op
  dup 8 shr 0xff band op
  dup 16 shr 0xff band op
  24 shr 0xff band op
;
: op-lendian64
  dup 0 shr 0xff band op
  dup 8 shr 0xff band op
  dup 16 shr 0xff band op
  dup 24 shr 0xff band op
  dup 32 shr 0xff band op
  dup 40 shr 0xff band op
  dup 48 shr 0xff band op
  56 shr 0xff band op
;
: fixup-byte
  shr 0xff band Int.pick2 cast-pointer c!
  1 +
;
: fixup-lendian32
  Int.pick2 0 fixup-byte
  Int.pick2 8 fixup-byte
  Int.pick2 16 fixup-byte
  Int.pick2 24 fixup-byte
;

: fixup-to-chere
  dup 4 + cp @ Int.swap - Int.swap fixup-lendian32 drop drop
;
: op-from-chere
  cp @ 4 + - op-lendian32
;

rem syscalls
: op-syscall 0x0f op 0x05 op ; immediate
: syscall0 >rax op-syscall ;
: syscall1 >rax >rdi op-syscall ;
: syscall2 >rax >rdi >rsi op-syscall ;
: exit 60 syscall1 ;

: p. . ; !( Pointer )

var if.in !( -- Pointer )
var if.out !( -- Pointer )
: if.save eff.save if.out ! if.in ! ; !( )
: if.load if.in @ if.out @ eff.load ; !( )
: if.check if.in @ if.out @ eff.save eff.check ; !( )
: if
  0x48 op 0x8b op 0x03 op
  0x48 op 0x83 op 0xc3 op 0x08 op
  0x48 op 0x83 op 0xf8 op 0x00 op
  0x0f op 0x84 op
  cp @
  0 op-lendian32
  Int.t eff.drop
  if.save 
; immediate !( -- IfAddr )
: else
  if.in @ if.out @ if.save eff.load
  0xe9 op
  0 op-lendian32
  fixup-to-chere
  cp @ 4 -
; immediate !( IfAddr -- IfAddr )
: then
  if.check
  fixup-to-chere
; immediate !( IfAddr )

var while.in !( -- Pointer )
var while.out !( -- Pointer )
: while.save eff.save while.out ! while.in ! ; !( )
: while.load while.in @ while.out @ eff.load ; !( )
: begin
  cp @
; immediate !( -- BeginAddr )
: while
  Int.t eff.drop while.save
  0x48 op 0x8b op 0x03 op
  0x48 op 0x83 op 0xc3 op 0x08 op
  0x48 op 0x83 op 0xf8 op 0x00 op
  0x0f op 0x84 op
  cp @
  0 op-lendian32
; immediate !( BeginAddr -- BeginAddr WhileAddr )
: repeat
  Int.swap
  0xe9 op
  op-from-chere
  fixup-to-chere
  while.load
; immediate !( BeginAddr WhileAddr )

: op-r8-call 0x41 op 0xff op 0xd0 op ;
: op-r9-call 0x41 op 0xff op 0xd1 op ;
: op-r10-call 0x41 op 0xff op 0xd2 op ;
: op-r11-call 0x41 op 0xff op 0xd3 op ;
: op-call
  0x4c op 0x8b op 0x13 op
  0x48 op 0x83 op 0xc3 op 0x08 op
  op-r10-call
;
: op-literal
  0x48 op 0x83 op 0xeb op 0x08 op
  0x49 op 0xba op
  op-lendian64
  0x4c op 0x89 op 0x13 op
;

: postpone-in
  op-literal
  op-call
;

: postpone
  parse-token token search-word word-code op-literal
  s" postpone-in" search-word word-code op-literal
  op-call
; immediate

: spill-rbx 0x53 op ;
: restore-rbx 0x5b op ;
: c.sub builtin.c.sub ;
: ccc.call6 builtin.c.call6 ;
: c.call0
  Pointer.t eff.drop Int.t eff.push
  postpone >r11
  spill-rbx
  op-r11-call
  restore-rbx
  postpone rax>
; immediate !( )
: c.call1
  Pointer.t eff.drop Int.t eff.drop Int.t eff.push
  postpone >r11 postpone >rdi
  spill-rbx
  op-r11-call
  restore-rbx
  postpone rax>
; immediate !( )
: c.call2
  Pointer.t eff.drop Int.t eff.drop Int.t eff.drop Int.t eff.push
  postpone >r11 postpone >rsi postpone >rdi
  spill-rbx
  op-r11-call
  restore-rbx
  postpone rax>
; immediate !( )
: c.call6
  Pointer.t eff.drop Int.t eff.drop Int.t eff.drop Int.t eff.drop Int.t eff.drop Int.t eff.drop Int.t eff.drop Int.t eff.push
  postpone >r11 postpone >r9 postpone >r8 postpone >rcx postpone >rdx postpone >rsi postpone >rdi
  spill-rbx
  op-r11-call
  restore-rbx
  postpone rax>
; immediate !( )
: rtld-lazy 1 ;
: rtld-now 2 ;
: dlopen builtin.c.dlopen c.call2 ;
: dlsym builtin.c.dlsym c.call2 ;
: dlclose builtin.c.dlclose c.call1 ;
