: Type builtin.Type.t builtin.tapply ;
: Type.t builtin.Type.t ; !( -- Type )
: newtype builtin.newtype ; immediate !( -- Type )
: uniontype builtin.uniontype ; immediate !( -- Type )
: paramtype builtin.paramtype ; immediate !( -- Type )
: tdrop builtin.tdrop ; !( Type -- )
: tpush builtin.tpush ; !( Type -- )
: tdup builtin.tdup ; !( Type -- )
: tapply builtin.tapply ; !( Type -- )

: Int.t builtin.Int.t ; !( -- Type )
: Int Int.t tapply ;
: Pointer.t newtype ;
: Pointer Pointer.t tapply ;
: a paramtype ;
: b paramtype ;
: c paramtype ;

: drop.eff a tdrop ;
: dup.eff a tdup ;
: drop trait ; !( drop.eff )
: dup trait ; !( dup.eff )

: cell 8 ;

: grow X 0x48 X 0x83 X 0xeb X 0x08 ; !( -- Int )
: Int.drop X 0x48 X 0x83 X 0xc3 X 0x08 ; !( Int ) impl> drop
: >rax X 0x48 X 0x8b X 0x03 Int.drop ;
: >rbx X 0x48 X 0x8b X 0x1b Int.drop ;
: >rcx X 0x48 X 0x8b X 0x0b Int.drop ;
: >rdi X 0x48 X 0x8b X 0x3b Int.drop ;
: >rsi X 0x48 X 0x8b X 0x33 Int.drop ;
: rax> grow X 0x48 X 0x89 X 0x03 ;
: rbx> grow X 0x48 X 0x89 X 0x1b ;
: rcx> grow X 0x48 X 0x89 X 0x0b ;
: Int.dup >rax grow rax> ; impl> dup
: Type.dup Int.dup ; !( Type -- Type Type ) impl> dup
: Pointer.dup Int.dup ; !( Pointer -- Pointer Pointer ) impl> dup
: Int.swap >rax >rcx rax> rcx> ;
: Pointer.Int.swap Int.swap ; !( Pointer Int -- Int Pointer )
: Type.swap Int.swap ; !( Type Type -- Type Type )
: sp@ rbx> ; !( -- Pointer )
: sp! >rbx ; !( Pointer Pointer -- )

: + >rcx >rax X 0x48 X 0x01 X 0xc8 rax> ;
: - >rcx >rax X 0x48 X 0x29 X 0xc8 rax> ;
: p+ + ; !( Pointer Int -- Pointer )
: p- - ; !( Pointer Int -- Pointer )

: band >rcx >rax X 0x48 X 0x21 X 0xc8 rax> ;
: shr >rcx >rax X 0x48 X 0xd3 X 0xe8 rax> ;
: @ >rax X 0x48 X 0x8b X 0x00 rax> ; !( Pointer -- Int )
: ! >rax >rcx X 0x48 X 0x89 X 0x08 ; !( Int Pointer -- )
: p@ >rax X 0x48 X 0x8b X 0x00 rax> ; !( Pointer -- Pointer )
: p! >rax >rcx X 0x48 X 0x89 X 0x08 ; !( Pointer Pointer -- )
: c! >rax >rcx X 0x88 X 0x08 ; !( Int Pointer -- )
: Int.pick3.eff
  a dup tdrop
  b dup tdrop
  Int.t tdrop
  Int.t tpush tpush tpush Int.t tpush
;
: Int.pick3 sp@ cell cell + cell + p+ @ ; !( Int.pick3.eff )
: +! dup @ Int.pick3 + Pointer.Int.swap ! Int.drop ;

: dp builtin.dp ; !( -- Pointer )
: dp@ dp p@ ;
: cp builtin.cp ; !( -- Pointer )
: here dp@ ;
: allot dp +! ;
: , here ! cell allot ;
: var create 0 , ;
: const create , does> @ ; !( Int )

: op cp p@ c! 1 cp +! ;
: ret 0xc3 op ; immediate

rem syscalls
: op-syscall 0x0f op 0x05 op ; immediate
: syscall0 >rax op-syscall ;
: syscall1 >rax >rdi op-syscall ;
: syscall2 >rax >rdi >rsi op-syscall ;
: exit 60 syscall1 ;
