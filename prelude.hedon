: b.Type builtin.Type builtin.Type.eff ;
: Type builtin.Type ; !( -- b.Type )
: eff.drop builtin.eff.drop ; !( Type -- )
: eff.push builtin.eff.push ; !( Type -- )
: eff.dup builtin.eff.dup ; !( Type -- )
: newtype builtin.newtype Type eff.push ; immediate
: paramtype builtin.paramtype Type eff.push ; immediate
: a paramtype ;
: b paramtype ;
: c paramtype ;

: Quot builtin.Quot ; !( -- Type )
: Token newtype ;
: Int builtin.Int ; !( -- Type )
: Cstr builtin.Cstr ; !( -- Type )
: Bool newtype ;
: Pointer newtype ;
: EffSave newtype ;

: eff.save-out builtin.eff.save-out ; !( -- EffSave )
: eff.load-out builtin.eff.load-out ; !( EffSave -- )
: eff.save builtin.eff.save ; !( -- EffSave )
: eff.load builtin.eff.load ; !( EffSave -- )
: eff.check builtin.eff.check ; !( EffSave EffSave -- )

: to-int ; !( Pointer -- Int )
: to-bool ; !( Int -- Bool )
: true 1 ; !( -- Bool )
: false 0 ; !( -- Bool )
: cell 8 ;
: null 0 ; !( -- Pointer )
: .b . ; !( Bool -- )

: drop.eff a eff.drop ;
: dup.eff a eff.dup ;
: drop trait ; eff.attach drop.eff
: dup trait ; eff.attach dup.eff

: grow [ 0x48 0x83 0xeb 0x08 ] X ; !( -- Int )
: Int.drop [ 0x48 0x83 0xc3 0x08 ] X ; !( Int ) impl> drop
: Bool.drop Int.drop ; !( Bool ) impl> drop
: Pointer.drop Int.drop ; !( Pointer ) impl> drop
: Type.drop [ 0x48 0x83 0xc3 0x08 ] X ; !( Type ) impl> drop
: >rax [ 0x48 0x8b 0x03 ] X Int.drop ;
: >rcx [ 0x48 0x8b 0x0b ] X Int.drop ;
: >rdx [ 0x48 0x8b 0x13 ] X Int.drop ;
: >rdi [ 0x48 0x8b 0x3b ] X Int.drop ;
: >rsi [ 0x48 0x8b 0x33 ] X Int.drop ;
: >r8 [ 0x4c 0x8b 0x03 ] X Int.drop ;
: >r9 [ 0x4c 0x8b 0x0b ] X Int.drop ;
: >r10 [ 0x4c 0x8b 0x13 ] X Int.drop ;
: >r11 [ 0x4c 0x8b 0x1b ] X Int.drop ;
: rax> grow [ 0x48 0x89 0x03 ] X ;
: rcx> grow [ 0x48 0x89 0x0b ] X ;
: Int.dup >rax grow rax> ; impl> dup
: Type.dup Int.dup ; !( Type -- Type Type ) impl> dup
: Pointer.dup Int.dup ; !( Pointer -- Pointer Pointer ) impl> dup
: Quot.dup Int.dup ; !( Quot -- Quot Quot ) impl> dup
: EffSave.dup Int.dup ; !( EffSave -- EffSave EffSave ) impl> dup
: prim.Int.swap >rax >rcx rax> rcx> ;
: prim.Type.swap prim.Int.swap ; !( Type Type -- Type Type )

: lent.eff a dup eff.drop eff.push b eff.push ;
: lent trait ; eff.attach lent.eff
: swap.eff a dup eff.drop b dup eff.drop prim.Type.swap eff.push eff.push ;
: swap trait ; eff.attach swap.eff

: Int.swap prim.Int.swap ; impl> swap
: Type.swap prim.Type.swap ; impl> swap
: Cstr.swap Int.swap ; !( Cstr Cstr -- Cstr Cstr ) impl> swap
: Pointer.Cstr.swap prim.Int.swap ; !( Pointer Cstr -- Cstr Pointer ) impl> swap
: Cstr.Pointer.swap prim.Int.swap ; !( Cstr Pointer -- Pointer Cstr ) impl> swap
: Pointer.swap Int.swap ; !( Pointer Pointer -- Pointer Pointer ) impl> swap
: Pointer.Int.swap Int.swap ; !( Pointer Int -- Int Pointer ) impl> swap
: Int.Pointer.swap Int.swap ; !( Int Pointer -- Pointer Int ) impl> swap
: Quot.swap Int.swap ; !( Quot Quot -- Quot Quot ) impl> swap
: Quot.Type.swap Int.swap ; !( Quot Type -- Type Quot ) impl> swap

: + >rcx >rax [ 0x48 0x01 0xc8 ] X rax> ;
: - >rcx >rax [ 0x48 0x29 0xc8 ] X rax> ;
: p+ + ; !( Pointer Int -- Pointer )
: p- - ; !( Pointer Int -- Pointer )
: pp+ + ; !( Pointer Pointer -- Pointer )
: pp- - ; !( Pointer Pointer -- Pointer )
: eq
  >rcx >rax
  [ 0x48 0x39 0xc8
    0x0f 0x94 0xc0
    0x48 0x0f 0xb6 0xc0 ] X
  rax>
; !( Int Int -- Bool )
: <
  >rcx >rax
  [ 0x48 0x39 0xc8
    0x0f 0x9c 0xc0
    0x48 0x0f 0xb6 0xc0 ] X
  rax>
; !( Int Int -- Bool )

: >rbx [ 0x48 0x8b 0x1b ] X ; !( Int -- )
: rbx> grow [ 0x48 0x89 0x1b ] X ;
: sp@ rbx> ; !( -- Pointer )
: sp! >rbx ; !( Pointer -- )

: band >rcx >rax [ 0x48 0x21 0xc8 ] X rax> ;
: shr >rcx >rax [ 0x48 0xd3 0xe8 ] X rax> ;
: @ >rax [ 0x48 0x8b 0x00 ] X rax> ; !( Pointer -- Int )
: u32@ >rax [ 0x8b 0x00 ] X rax> ; !( Pointer -- Int )
: ! >rax >rcx [ 0x48 0x89 0x08 ] X ; !( Int Pointer -- )
: p@ @ ; !( Pointer -- Pointer )
: p! ! ; !( Pointer Pointer -- )
: c! >rax >rcx [ 0x88 0x08 ] X ; !( Int Pointer -- )
: Int.pick3.eff
  b dup eff.drop
  a dup eff.drop
  Int eff.drop
  Int eff.push eff.push eff.push Int eff.push
;
: Int.pick3 sp@ cell cell + cell + p+ @ ; eff.attach Int.pick3.eff
: +! dup @ Int.pick3 + Pointer.Int.swap ! Int.drop ;

: cp builtin.cp ; !( -- Pointer )
: cp@ cp p@ ;


rem syscalls
: write-syscall 0x0f op 0x05 op ; immediate
: syscall0 >rax write-syscall >rax ;
: syscall1 >rax >rdi write-syscall rax> ;
: syscall2 >rax >rsi >rdi write-syscall rax> ;
: syscall3 >rax >rdx >rsi >rdi write-syscall rax> ;
: exit 60 syscall1 Int.drop ;

rem dataflow
: spill.unsafe 0xff op 0x33 op 0xff op 0x33 op ;
: drop.unsafe 0x48 op 0x83 op 0xc3 op 0x08 op ;
: restore.unsafe 0x8f op 0x03 op 0x8f op 0x03 op ;
: grow.unsafe 0x48 op 0x83 op 0xeb op 0x08 op ;
: >rax.unsafe >rax ; !( )
: >rcx.unsafe >rcx ; !( )
: rax>.unsafe rax> ; !( )
: rcx>.unsafe rcx> ; !( )
: swap.unsafe [ >rcx.unsafe >rax.unsafe rcx>.unsafe rax>.unsafe ] postcompile ;
: dip
  a dup eff.drop
  spill.unsafe drop.unsafe
  Quot.Type.swap compile
  grow.unsafe restore.unsafe
  eff.push
; immediate
: 2dip
  a dup eff.drop
  b dup eff.drop
  spill.unsafe drop.unsafe
  spill.unsafe drop.unsafe
  [ Quot.Type.swap compile ] dip
  grow.unsafe restore.unsafe
  grow.unsafe restore.unsafe
  eff.push
  eff.push
; immediate
: 3dip
  a dup eff.drop
  b dup eff.drop
  c dup eff.drop
  spill.unsafe drop.unsafe
  spill.unsafe drop.unsafe
  spill.unsafe drop.unsafe
  [ Quot.Type.swap compile ] 2dip
  grow.unsafe restore.unsafe
  grow.unsafe restore.unsafe
  grow.unsafe restore.unsafe
  eff.push
  eff.push
  eff.push
; immediate
: keep
  a dup eff.drop dup eff.push
  spill.unsafe
  Quot.Type.swap compile
  grow.unsafe restore.unsafe
  eff.push
; immediate
: 2keep
  a dup eff.drop b dup eff.drop dup eff.push [ dup eff.push ] dip
  spill.unsafe
  swap.unsafe
  spill.unsafe
  swap.unsafe
  [ compile ] 2dip
  grow.unsafe restore.unsafe
  grow.unsafe restore.unsafe
  eff.push
  eff.push
; immediate
: bi
  Quot.swap
  a dup eff.drop
  dup eff.push
  spill.unsafe
  Quot.Type.swap compile
  dup eff.push
  grow.unsafe restore.unsafe
  Quot.Type.swap compile
  drop
; immediate
: bi@
  Quot.dup
  swap.unsafe
  spill.unsafe drop.unsafe
  compile
  grow.unsafe restore.unsafe
  compile
; immediate

rem op

: take-byte shr 0xff band ;
: fixup-byte take-byte Pointer.Int.swap fixup-op ;
: next-byte [ 1 p+ ] dip ;
: fixup-lendian32
  [ 0 fixup-byte ] 2keep next-byte
  [ 8 fixup-byte ] 2keep next-byte
  [ 16 fixup-byte ] 2keep next-byte
  [ 24 fixup-byte ] 2keep next-byte
  drop drop
;
: op-lendian32
  dup 0 take-byte op
  dup 8 take-byte op
  dup 16 take-byte op
  24 take-byte op
;
: op-lendian64
  dup 0 take-byte op
  dup 8 take-byte op
  dup 16 take-byte op
  dup 24 take-byte op
  dup 32 take-byte op
  dup 40 take-byte op
  dup 48 take-byte op
  56 take-byte op
;

: get-rel cp @ Int.swap - ;
: fixup-to-end 4 p+ to-int ;
: fixup-by-here dup fixup-to-end get-rel fixup-lendian32 ;
: write-to-here to-int cp@ fixup-to-end - op-lendian32 ;

rem meta

: dp builtin.dp ; !( -- Pointer )
: dp@ dp p@ ;
: here dp@ ;
: allot dp +! ;
: , here ! cell allot ;
: pointer ; !( -- Pointer )
: var dp @ literal quot parse-token create-def 0 , ;

rem controlflow

: write-je 0x0f op 0x84 op cp@ 0 op-lendian32 ;
: write-when
  0x48 op 0x8b op 0x03 op         rem mov rax [rbx]
  0x48 op 0x83 op 0xc3 op 0x08 op rem add rbx 8
  0x48 op 0x83 op 0xf8 op 0x00 op rem cmp rax, 0
  write-je
;
: when
  Bool eff.drop
  eff.save dup
  write-when [ compile ] 3dip fixup-by-here
  eff.save eff.check eff.load
; immediate

: write-else
  write-when [ compile ] dip 0xe9 op 0 op-lendian32 fixup-by-here cp@ 4 p-
;
: if
  Bool eff.drop
  Quot.swap
  eff.save
  [ write-else ] dip
  eff.save [ eff.load ] dip
  [ compile ] 2dip [ fixup-by-here ] dip
  eff.save eff.check
; immediate
: not [ false ] [ true ] if ;

: write-while
  0x48 op 0x8b op 0x03 op         rem mov rax [rbx]
  0x48 op 0x83 op 0xc3 op 0x08 op rem add rbx 8
  0x48 op 0x83 op 0xf8 op 0x00 op rem cmp rax 0
  write-je
;
: while
  cp@
  [ Quot.swap compile ] dip
  Bool eff.drop
  write-while
  eff.save-out
  [ compile ] 3dip 0xe9 op
  eff.load-out
  Pointer.swap write-to-here
  fixup-by-here
; immediate

