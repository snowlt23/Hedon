: strlen
  0 swap [ dup c@ 0 eq not ] [ swap 1+ swap 1 s+ ] while drop
;

rem d s
: chrcpy u8@ swap u8! ;
rem d s n
: memcpy 0 swap [ [ 2dup chrcpy [ 1 p+ ] bi@ ] dip ] do drop drop ;
rem d s n
: strcpyn [ [ cstr-to-pointer ] bi@ ] dip memcpy ;
: strcpy dup strlen 1+ strcpyn ;
: new-cstr 1+ c.malloc pointer-to-cstr ;

rem ( s1 s2 -- b )
: eq-len? 2dup [ strlen ] bi@ eq ;
: strend? c@ 0 eq ;
: streq-char? [ c@ ] bi@ eq ;
: streq?
  [ dup strend? not ] [ 2dup streq-char? not [ drop drop false ret "" "" ] when [ 1 s+ ] bi@ ] while
  drop drop true
;

: StringU newtype ;
: String newtype ;
lentable String.lent StringU String
: pointer-to-string ; ![ Pointer -- String ]
: string-to-pointer ; ![ String -- Pointer ]
: String.head-size cell cell + ;
: String.cap ; ![ String -- Pointer ]
: String.len cell p+ ; ![ String -- Pointer ]
: String.data cell cell + p+ ; ![ String -- Cstr ]
: String.dup Int.dup ; ![ String -- String String ] impl dup
: String.drop Int.drop ; ![ String -- ] impl drop
: String.swap Int.swap ; ![ String String -- String String ] impl swap

: length String.len @ ;
: String.need-extend [ length + ] keep String.cap @ le not ;
: String.2cap dup String.cap @ dup + swap String.cap ! ;
: String.extend-cap [ 2dup String.need-extend ] [ dup String.2cap ] while drop drop ;
: String.realloc [ string-to-pointer ] keep String.cap @ String.head-size + 1 + realloc pointer-to-string ;
: String.extend [ String.extend-cap ] keep String.realloc ;
: String.extend-if-need 2dup String.need-extend [ String.extend ] [ swap drop ] if ;

: alloc-string String.head-size + 1 + alloc pointer-to-string ;
: new-string dup alloc-string [ String.cap ! ] keep [ String.len 0 swap ! ] keep ;
: length-cstr [ strlen ] keep ;
: string length-cstr dup strlen new-string [ String.data swap strcpy ] keep [ String.len ! ] keep ;
: .ss String.data .s ;

: copy-and-seek Cstr.dup strlen [ [ strcpy ] 2keep Cstr.drop ] dip s+ ;
: 2length [ length ] bi@ + ;
: alloc-2string 2length new-string ;
: 2copy-string swap copy-and-seek swap copy-and-seek drop ;
: concat swap 2dup alloc-2string [ String.data [ [ String.data ] bi@ ] dip 2copy-string ] keep ;

: String.tail [ String.data ] [ length ] bi s+ ;
: string@ String.data swap s+ c@ ;
: add-length String.len +! ;
: appendc [ length-cstr ] dip [ dup strlen ] dip String.extend-if-need [ String.tail swap strcpy ] keep [ add-length ] keep ;
: push-char 1 swap String.extend-if-need [ String.tail c! ] keep [ 1 swap add-length ] keep ;

var nullstr-var ![ -- Pointer ]
: init-nullstr here nullstr-var p! 0 here pointer-to-cstr c! 1 allot ;
: nullchar 0 ;
: nullstr nullstr-var p@ pointer-to-cstr ;
init-nullstr

rem dump-type String.need-extend cr
rem dump-type String.extend-if-need cr
