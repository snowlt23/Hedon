: 2dup.eff
  a dup eff.drop b dup eff.drop dup eff.push swap dup eff.push swap eff.push eff.push
;
: 2dup
  swap dup [ swap dup ] dip swap
; eff.attach 2dup.eff
: bi@ dup compile [ swap ] postcompile compile [ swap ] postcompile ; immediate

rem n q --
: do
  [ 0 ] postcompile
  [ 2dup gr ] postquot
  [ [ 1+ ] postquot combine ] dip
  swap [ while ] postcompile
; immediate

rem n "name"
: return-pointer Pointer eff.push ;
: array dp @ literal token-to-quot parse-token create-def [ return-pointer ] eff.postattach ;
: array-addr-by-index cell mul p+ ;
: array@ swap array-addr-by-index @ ;
: array! swap array-addr-by-index ! ;
: Int.allot cell mul allot ;

: cast> Fixnum eff.drop parse-token token-name search-word as-type eff.push ; immediate
: to-pointer cast> Pointer ;

: test-check [ drop ] [ "[ERROR] " .s .s 1 exit ] if ;
: test compile [ test-check ] postcompile ; immediate

: parse-name parse-token token-name ;
: parse-word parse-name search-word ;
: parse-type parse-word as-type ;

rem ( lentable "word-name" "UniqueT" "LentT" -- )
: lentable
  parse-name <word>
    [ Fixnum.drop ] postquot >>code
    <eff> parse-word [ >>eff.in ] keep >>eff.out parse-word >>eff.out >>eff
    "lent" >>impl
  >vocab
;
